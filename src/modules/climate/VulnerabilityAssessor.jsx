// /src/modules/climate/VulnerabilityAssessor.jsx
import {
  Download as DownloadIcon,
  FilterAlt as FilterIcon,
  Layers as LayersIcon,
  Map as MapIcon,
  Warning as RiskIcon
} from '@mui/icons-material';
import {
  Box,
  Button,
  Card,
  CardContent,
  Chip,
  Divider,
  FormControl,
  InputLabel,
  LinearProgress,
  List,
  ListItem,
  ListItemText,
  MenuItem,
  Paper,
  Select,
  Slider,
  Tab,
  Tabs,
  Typography
} from '@mui/material';
import React, { useState } from 'react';
import { useGetClimateRisksQuery } from '../../api/climateApi';
import RiskMap from '../maps/RiskMap';

const VulnerabilityAssessor = () => {
  const { data: risks = [], isLoading } = useGetClimateRisksQuery();
  const [activeTab, setActiveTab] = useState(0);
  const [riskFilter, setRiskFilter] = useState('all');
  const [severityThreshold, setSeverityThreshold] = useState(50);
  const [selectedRisk, setSelectedRisk] = useState(null);

  const filteredRisks = risks
    .filter(risk => riskFilter === 'all' || risk.type === riskFilter)
    .filter(risk => risk.severity >= severityThreshold);

  const riskTypes = [...new Set(risks.map(risk => risk.type))];

  return (
    <Paper sx={{ p: 2, height: '100%' }}>
      <Typography variant="h6" gutterBottom sx={{ display: 'flex', alignItems: 'center' }}>
        <RiskIcon sx={{ mr: 1 }} /> Climate Vulnerability Assessment
      </Typography>

      <Box sx={{ display: 'flex', gap: 2, mb: 2 }}>
        <FormControl sx={{ minWidth: 200 }} size="small">
          <InputLabel>Risk Type</InputLabel>
          <Select
            value={riskFilter}
            onChange={(e) => setRiskFilter(e.target.value)}
            label="Risk Type"
            startAdornment={<FilterIcon color="action" />}
          >
            <MenuItem value="all">All Risk Types</MenuItem>
            {riskTypes.map(type => (
              <MenuItem key={type} value={type}>{type.replace(/_/g, ' ')}</MenuItem>
            ))}
          </Select>
        </FormControl>
        <Box sx={{ flex: 1 }}>
          <Typography variant="caption" display="block">
            Minimum Severity: {severityThreshold}%
          </Typography>
          <Slider
            value={severityThreshold}
            onChange={(e, newValue) => setSeverityThreshold(newValue)}
            min={0}
            max={100}
            valueLabelDisplay="auto"
          />
        </Box>
        <Button
          variant="outlined"
          startIcon={<DownloadIcon />}
        >
          Export Report
        </Button>
      </Box>

      <Tabs value={activeTab} onChange={(e, newValue) => setActiveTab(newValue)} sx={{ mb: 2 }}>
        <Tab label="Risk Map" icon={<MapIcon />} />
        <Tab label="Risk List" icon={<LayersIcon />} />
        <Tab label="Mitigation Plans" />
      </Tabs>

      {isLoading ? (
        <LinearProgress />
      ) : activeTab === 0 ? (
        <Box sx={{ height: 500 }}>
          <RiskMap risks={filteredRisks} onSelectRisk={setSelectedRisk} />
        </Box>
      ) : activeTab === 1 ? (
        <List sx={{ maxHeight: 500, overflow: 'auto' }}>
          {filteredRisks.map((risk, index) => (
            <React.Fragment key={risk.id}>
              <ListItem 
                button
                selected={selectedRisk?.id === risk.id}
                onClick={() => setSelectedRisk(risk)}
              >
                <ListItemText
                  primary={risk.areaName}
                  secondary={
                    <>
                      <Typography component="span" variant="body2">
                        {risk.type.replace(/_/g, ' ')} • {risk.hazardType}
                      </Typography>
                      <br />
                      <Typography component="span" variant="caption">
                        {risk.atRiskPopulation} people affected • Last updated: {new Date(risk.updatedAt).toLocaleDateString()}
                      </Typography>
                    </>
                  }
                />
                <Box sx={{ display: 'flex', flexDirection: 'column', alignItems: 'flex-end' }}>
                  <Chip 
                    label={`Severity: ${risk.severity}%`} 
                    size="small"
                    color={
                      risk.severity > 75 ? 'error' :
                      risk.severity > 50 ? 'warning' : 'default'
                    }
                  />
                  <Chip 
                    label={`Confidence: ${risk.confidence}%`} 
                    size="small"
                    sx={{ mt: 1 }}
                    variant="outlined"
                  />
                </Box>
              </ListItem>
              {index < filteredRisks.length - 1 && <Divider />}
            </React.Fragment>
          ))}
        </List>
      ) : (
        <Typography>Mitigation plans would be displayed here</Typography>
      )}

      {selectedRisk && (
        <Card sx={{ mt: 2 }}>
          <CardContent>
            <Typography variant="subtitle1" gutterBottom>
              {selectedRisk.areaName} - {selectedRisk.type.replace(/_/g, ' ')}
            </Typography>
            <Typography variant="body2" paragraph>
              {selectedRisk.description}
            </Typography>
            <Box sx={{ display: 'flex', gap: 2 }}>
              <Chip 
                label={`${selectedRisk.atRiskPopulation} people at risk`} 
                color="error"
                size="small"
              />
              <Chip 
                label={`${selectedRisk.criticalInfrastructure} infrastructure items`} 
                color="warning"
                size="small"
              />
              <Chip 
                label={`Priority: ${selectedRisk.priority}`} 
                color="primary"
                size="small"
              />
            </Box>
          </CardContent>
        </Card>
      )}
    </Paper>
  );
};

export default VulnerabilityAssessor;